// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.3
// source: dummy.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DummyServiceClient is the client API for DummyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DummyServiceClient interface {
	// unary call
	DummyCall(ctx context.Context, in *DummyRequest, opts ...grpc.CallOption) (*DummyResponse, error)
	// server streaming
	DummyCallServerStreaming(ctx context.Context, in *DummyRequest, opts ...grpc.CallOption) (DummyService_DummyCallServerStreamingClient, error)
	// client streaming
	DummyCallClientStreaming(ctx context.Context, opts ...grpc.CallOption) (DummyService_DummyCallClientStreamingClient, error)
	DummyCallBiDirectionalStreaming(ctx context.Context, opts ...grpc.CallOption) (DummyService_DummyCallBiDirectionalStreamingClient, error)
}

type dummyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDummyServiceClient(cc grpc.ClientConnInterface) DummyServiceClient {
	return &dummyServiceClient{cc}
}

func (c *dummyServiceClient) DummyCall(ctx context.Context, in *DummyRequest, opts ...grpc.CallOption) (*DummyResponse, error) {
	out := new(DummyResponse)
	err := c.cc.Invoke(ctx, "/greet.DummyService/DummyCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dummyServiceClient) DummyCallServerStreaming(ctx context.Context, in *DummyRequest, opts ...grpc.CallOption) (DummyService_DummyCallServerStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &DummyService_ServiceDesc.Streams[0], "/greet.DummyService/DummyCallServerStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &dummyServiceDummyCallServerStreamingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DummyService_DummyCallServerStreamingClient interface {
	Recv() (*DummyResponse, error)
	grpc.ClientStream
}

type dummyServiceDummyCallServerStreamingClient struct {
	grpc.ClientStream
}

func (x *dummyServiceDummyCallServerStreamingClient) Recv() (*DummyResponse, error) {
	m := new(DummyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dummyServiceClient) DummyCallClientStreaming(ctx context.Context, opts ...grpc.CallOption) (DummyService_DummyCallClientStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &DummyService_ServiceDesc.Streams[1], "/greet.DummyService/DummyCallClientStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &dummyServiceDummyCallClientStreamingClient{stream}
	return x, nil
}

type DummyService_DummyCallClientStreamingClient interface {
	Send(*DummyRequest) error
	CloseAndRecv() (*DummyResponse, error)
	grpc.ClientStream
}

type dummyServiceDummyCallClientStreamingClient struct {
	grpc.ClientStream
}

func (x *dummyServiceDummyCallClientStreamingClient) Send(m *DummyRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dummyServiceDummyCallClientStreamingClient) CloseAndRecv() (*DummyResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(DummyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dummyServiceClient) DummyCallBiDirectionalStreaming(ctx context.Context, opts ...grpc.CallOption) (DummyService_DummyCallBiDirectionalStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &DummyService_ServiceDesc.Streams[2], "/greet.DummyService/DummyCallBiDirectionalStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &dummyServiceDummyCallBiDirectionalStreamingClient{stream}
	return x, nil
}

type DummyService_DummyCallBiDirectionalStreamingClient interface {
	Send(*DummyRequest) error
	Recv() (*DummyResponse, error)
	grpc.ClientStream
}

type dummyServiceDummyCallBiDirectionalStreamingClient struct {
	grpc.ClientStream
}

func (x *dummyServiceDummyCallBiDirectionalStreamingClient) Send(m *DummyRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dummyServiceDummyCallBiDirectionalStreamingClient) Recv() (*DummyResponse, error) {
	m := new(DummyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DummyServiceServer is the server API for DummyService service.
// All implementations must embed UnimplementedDummyServiceServer
// for forward compatibility
type DummyServiceServer interface {
	// unary call
	DummyCall(context.Context, *DummyRequest) (*DummyResponse, error)
	// server streaming
	DummyCallServerStreaming(*DummyRequest, DummyService_DummyCallServerStreamingServer) error
	// client streaming
	DummyCallClientStreaming(DummyService_DummyCallClientStreamingServer) error
	DummyCallBiDirectionalStreaming(DummyService_DummyCallBiDirectionalStreamingServer) error
	mustEmbedUnimplementedDummyServiceServer()
}

// UnimplementedDummyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDummyServiceServer struct {
}

func (UnimplementedDummyServiceServer) DummyCall(context.Context, *DummyRequest) (*DummyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DummyCall not implemented")
}
func (UnimplementedDummyServiceServer) DummyCallServerStreaming(*DummyRequest, DummyService_DummyCallServerStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method DummyCallServerStreaming not implemented")
}
func (UnimplementedDummyServiceServer) DummyCallClientStreaming(DummyService_DummyCallClientStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method DummyCallClientStreaming not implemented")
}
func (UnimplementedDummyServiceServer) DummyCallBiDirectionalStreaming(DummyService_DummyCallBiDirectionalStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method DummyCallBiDirectionalStreaming not implemented")
}
func (UnimplementedDummyServiceServer) mustEmbedUnimplementedDummyServiceServer() {}

// UnsafeDummyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DummyServiceServer will
// result in compilation errors.
type UnsafeDummyServiceServer interface {
	mustEmbedUnimplementedDummyServiceServer()
}

func RegisterDummyServiceServer(s grpc.ServiceRegistrar, srv DummyServiceServer) {
	s.RegisterService(&DummyService_ServiceDesc, srv)
}

func _DummyService_DummyCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DummyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DummyServiceServer).DummyCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greet.DummyService/DummyCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DummyServiceServer).DummyCall(ctx, req.(*DummyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DummyService_DummyCallServerStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DummyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DummyServiceServer).DummyCallServerStreaming(m, &dummyServiceDummyCallServerStreamingServer{stream})
}

type DummyService_DummyCallServerStreamingServer interface {
	Send(*DummyResponse) error
	grpc.ServerStream
}

type dummyServiceDummyCallServerStreamingServer struct {
	grpc.ServerStream
}

func (x *dummyServiceDummyCallServerStreamingServer) Send(m *DummyResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DummyService_DummyCallClientStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DummyServiceServer).DummyCallClientStreaming(&dummyServiceDummyCallClientStreamingServer{stream})
}

type DummyService_DummyCallClientStreamingServer interface {
	SendAndClose(*DummyResponse) error
	Recv() (*DummyRequest, error)
	grpc.ServerStream
}

type dummyServiceDummyCallClientStreamingServer struct {
	grpc.ServerStream
}

func (x *dummyServiceDummyCallClientStreamingServer) SendAndClose(m *DummyResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dummyServiceDummyCallClientStreamingServer) Recv() (*DummyRequest, error) {
	m := new(DummyRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DummyService_DummyCallBiDirectionalStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DummyServiceServer).DummyCallBiDirectionalStreaming(&dummyServiceDummyCallBiDirectionalStreamingServer{stream})
}

type DummyService_DummyCallBiDirectionalStreamingServer interface {
	Send(*DummyResponse) error
	Recv() (*DummyRequest, error)
	grpc.ServerStream
}

type dummyServiceDummyCallBiDirectionalStreamingServer struct {
	grpc.ServerStream
}

func (x *dummyServiceDummyCallBiDirectionalStreamingServer) Send(m *DummyResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dummyServiceDummyCallBiDirectionalStreamingServer) Recv() (*DummyRequest, error) {
	m := new(DummyRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DummyService_ServiceDesc is the grpc.ServiceDesc for DummyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DummyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "greet.DummyService",
	HandlerType: (*DummyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DummyCall",
			Handler:    _DummyService_DummyCall_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DummyCallServerStreaming",
			Handler:       _DummyService_DummyCallServerStreaming_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DummyCallClientStreaming",
			Handler:       _DummyService_DummyCallClientStreaming_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DummyCallBiDirectionalStreaming",
			Handler:       _DummyService_DummyCallBiDirectionalStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "dummy.proto",
}
